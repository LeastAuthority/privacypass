name: Build Python Packages

"on":
  push

jobs:
  template:

    steps:
    - &CHECKOUT
      uses: "actions/checkout@v2"
      with:
        # Fetch all history
        fetch-depth: 0
        submodules: "recursive"

    - &FINISH_CHECKOUT
      name: "Finish Checkout"
      run: |
        # We need tags to compute a version number.
        git fetch --tags

    - &GET_PACKAGE_DEPENDENCIES
      name: "Get Packaging Dependencies"
      run: |
        pip install wheel twine

    - &UPLOAD_PACKAGES
      name: "Upload Packages"
      env:
        TWINE_USERNAME: "__token__"
        # Secret PyPI API key configured in the GitHub web interface.  Visit
        # the project Settings page, find Secrets beneath it.
        TWINE_PASSWORD: "${{ secrets.exarkun_pypi_api_key }}"
      run: |
        twine upload --repository pypi dist/*

    - &BDIST_WHEEL
      name: "Build Packages"
      run: |
        python setup.py bdist_wheel

  macos-packages:
    name: "Build macOS Packages"

    strategy:
      matrix:
        os:
        - "macos-latest"
        python-version:
        - "pypy3"

    runs-on: "${{ matrix.os }}"

    steps:
    - *CHECKOUT
    - *FINISH_CHECKOUT
    - *GET_PACKAGE_DEPENDENCIES
    - *BDIST_WHEEL
    - *UPLOAD_PACKAGES

  windows-packages:
    name: "Build Windows Packages"

    strategy:
      matrix:
        os:
        - "windows-latest"
        python-version:
        - "pypy3"

    runs-on: "${{ matrix.os }}"

    steps:
    # Avoid letting Windows newlines confusing milksnake.
    - run: "git config --global core.autocrlf false"
    - *CHECKOUT
    - *FINISH_CHECKOUT
    - *GET_PACKAGE_DEPENDENCIES
    - *BDIST_WHEEL
    - *UPLOAD_PACKAGES

  manylinux2010-packages:
    name: "Build manylinux2010 Packages"

    strategy:
      matrix:
        os:
        - "ubuntu-18.04"
        python-version:
        - "pypy3"

    runs-on: "${{ matrix.os }}"

    steps:
    - *CHECKOUT
    - *FINISH_CHECKOUT

    - name: "Inject Rust Installer"
      # Pending resolution to https://github.com/RalfG/python-wheels-manylinux-build/issues/11
      run: |
        mv setup.py setup.py.orig
        echo 'exec(open("/github/workspace/.github/workflows/manylinux2010-install-rust.py").read())' > setup.py
        cat setup.py.orig >> setup.py

    - name: "Build a binary wheel and a source tarball"
      uses: "RalfG/python-wheels-manylinux-build@v0.2.2-manylinux2010_x86_64"
      with:
        python-versions: "cp37-cp37m"

    - name: "Put packages where they can be found"
      run: |
        mkdir -p dist
        mv wheelhouse/*manylinux2010*.whl dist/

    - *UPLOAD_PACKAGES
